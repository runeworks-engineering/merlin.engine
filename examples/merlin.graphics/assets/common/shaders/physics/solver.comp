#version 430

#pragma once
#include "uniforms.comp"
#include "constants.comp"
#include "buffers.comp"
#include "colors.comp"
#include "nns.comp"
#include "sph.kernels.comp"
#include "boundary.comp"
#include "pbf.comp"
#include "granular.comp"
#include "elasticity.comp"
#include "pbs.comp"
#include "heat.comp"

layout (local_size_x = PTHREAD) in;

uniform uint stage;
void exec(uint index, uint kernel);

// XPBD_Main
void main() {
	uint index = gl_GlobalInvocationID.x;
	if (index >= u_numParticles + u_numEmitter) return;

	exec(index, stage);
}

void copyBuffers(uint i){
		uint bin = bin_index(i) = getBinIndex(b_pi.xyz);
		atomicAdd(ssbo_bins[bin].count, 1);
		ssbo_copy[i].last_position = ssbo_last_position[i];
		ssbo_copy[i].position = ssbo_position[i];
		ssbo_copy[i].predicted_position = ssbo_predicted_position[i];
		ssbo_copy[i].position_correction = ssbo_position_correction[i];
		ssbo_copy[i].velocity = ssbo_velocity[i];
		ssbo_copy[i].density = ssbo_density[i];
		ssbo_copy[i].lambda = ssbo_lambda[i];
		ssbo_copy[i].temperature = ssbo_temperature[i];
		ssbo_copy[i].sigma = ssbo_sigma[i];
		ssbo_copy[i].meta = ssbo_meta[i];
}

void sortBuffers(uint i){
	uint newID = atomicAdd(ssbo_bins[ssbo_copy[i].meta.y].index, -1) -1;

	ssbo_last_position[newID]		= ssbo_copy[i].last_position;
	ssbo_position[newID]			= ssbo_copy[i].position;
	ssbo_predicted_position[newID]	= ssbo_copy[i].predicted_position;
	ssbo_position_correction[newID] = ssbo_copy[i].position_correction;
	ssbo_velocity[newID]			= ssbo_copy[i].velocity;
	ssbo_density[newID]				= ssbo_copy[i].density;
	ssbo_lambda[newID]				= ssbo_copy[i].lambda;
	ssbo_temperature[newID]			= ssbo_copy[i].temperature;
	ssbo_sigma[newID]				= ssbo_copy[i].sigma;
	ssbo_meta[newID]				= ssbo_copy[i].meta;

	ssbo_meta[ssbo_meta[newID].z].z = newID;
}

void exec(uint index, uint kernel){
	
	if(index < u_numParticles)
		switch(kernel){
		case 0: 
			copyBuffers(index);
			break;
		case 1: 
			sortBuffers(index);
			break;
		case 2:
			if(phase(index) == FLUID)
				pbf_step(index, 0);
			else if(phase(index) == SOLID){
				pbs_step(index, 0);
				ssbo_density[index] = boundary_computePseudoMass(index);
			}else if(phase(index) >= BOUNDARY){
				ssbo_density[index] = boundary_computePseudoMass(index);
			}else if(phase(index) == GRANULAR){
				
				pbf_step(index, 0);
				ssbo_density[index] = boundary_computePseudoMass(index);
				ssbo_lambda[index] = 0;
			}

			if(phase(index) < BOUNDARY) ssbo_temperature[index] += computeTemperatureDelta(index) *u_dt;

			break;
		case 3: 
			if(phase(index) == FLUID){
				pbf_step(index, 1);
			}else if(phase(index) == SOLID){
				pbs_step(index, 1);
			}else if(phase(index) == GRANULAR){
				solveParticleCollision(index);
			}
			break;
		case 4:
			if(phase(index) == FLUID){
				pbf_step(index, 2);
			}else if(phase(index) == SOLID){
				pbs_step(index, 2);
			}else if(phase(index) == GRANULAR){
				ssbo_predicted_position[index].xyz += granular_solveFloorCollision(index);
				
			}

			break;
		case 5: 
			if(phase(index) == FLUID){
				pbf_step(index, 3);
			}else if(phase(index) == SOLID){
				pbs_step(index, 3);
			}else if(phase(index) == GRANULAR){
				pbf_step(index, 3);
			}
		case 6: 
			if(phase(index) == FLUID){
				pbf_step(index, 4);
			}else if(phase(index) == GRANULAR){

			}
			break;
		case 7: 
			if(phase(index) == FLUID){
				pbf_step(index, 5);
			}else if(phase(index) == GRANULAR){
				
			}

			//else if(phase(index) == SOLID)
				//pbs_step(index, 3);

			if(phase(index) == FLUID && ssbo_temperature[index] < 275+750){ 
				phase(index) = SOLID;
				ssbo_last_position[index] = ssbo_predicted_position[index]; // Fix rest position
			}
			else if(phase(index) == SOLID && ssbo_temperature[index] > 275+800) phase(index) = FLUID;
			else if(phase(index) == GRANULAR && ssbo_temperature[index] > 275+790) phase(index) = FLUID;
			
			break;
		}

}
