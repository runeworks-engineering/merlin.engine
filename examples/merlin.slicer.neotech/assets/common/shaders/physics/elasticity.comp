//?#version 430

#pragma once
//?#include "../common/uniforms.comp"
//?#include "../common/constants.comp"
//?#include "../common/buffers.comp"
//?#include "../common/colors.comp"
//?#include "../common/nns.comp"
//?#include "sph.kernels.comp" 

const float restVolume = 0.001;//g

void computeStress(uint i) {
    vec3 xi = b_pi.xyz;
    vec3 xi0 = b_last_xi.xyz;
    mat3 F = mat3(0.0);

    //deformation
	vec3 position = b_pi.xyz;
   OVERNNS
        if(i == j) continue;
        vec3 xj = b_xj.xyz;
        vec3 xj0 = b_last_xj.xyz;

        if(distance(xi0, xj0) > H || distance(xi, xj) > 2*H) continue;

        if(phase(j) == MATERIAL_SOFT){
            vec3 xj_xi = xj - xi;
            vec3 xi_xj_0 = xi0 - xj0;
            vec3 correctedRotatedKernel = poly6_grad(xi_xj_0);
            F += restVolume * outerProduct(xj_xi - (xj0 - xi0), correctedRotatedKernel);
        }

    OVERNNS_END

    F += mat3(1.0);

    //strain
    vec3 strain1, strain2;
    strain1.x = F[0][0] - 1.0; // strain[0]
    strain1.y = F[1][1] - 1.0; // strain[1]
    strain1.z = F[2][2] - 1.0; // strain[2]
    strain2.x = 0.5 * (F[0][1] + F[1][0]); // strain[3]
    strain2.y = 0.5 * (F[0][2] + F[2][0]); // strain[4]
    strain2.z = 0.5 * (F[1][2] + F[2][1]); // strain[5]
    vec6 strain = vec6(vec4(strain1, 0), vec4(strain2, 0));
    
    //stress
    float youngsModulus = 100000;
    float poissonRatio = 0.2;
    float mu = youngsModulus / (2.0 * (1.0 + poissonRatio));
	float lambda = youngsModulus * poissonRatio / ((1.0 + poissonRatio) * (1.0 - 2.0 * poissonRatio));

    float trace = strain.a.x + strain.a.y + strain.a.z;
    float ltrace = lambda * trace;
    vec3 stress1 = strain.a.xyz * 2.0 * mu;
    vec3 stress2 = strain.b.xyz * 2.0 * mu;
    stress1.x += ltrace; // stress[0]
    stress1.y += ltrace; // stress[1]
    stress1.z += ltrace; // stress[2]

    b_sigma_i = vec6(vec4(stress1, 0), vec4(stress2, 0));
}

vec3 symMatTimesVec(vec6 M, vec3 v){
    vec3 res;
	res[0] = M.a[0] * v[0] + M.b[0] * v[1] + M.b[1] * v[2];
	res[1] = M.b[0] * v[0] + M.a[1] * v[1] + M.b[2] * v[2];
	res[2] = M.b[1] * v[0] + M.b[2] * v[1] + M.a[2] * v[2];
    return res;
}

vec3 computeForces(uint i) {
    vec3 xi = b_pi.xyz;
    vec3 xi0 = b_last_xi.xyz;
	vec3 position = xi;

    vec3 forces = vec3(0);
   OVERNNS
        if(i == j) continue;
        vec3 xj = b_xj.xyz;
        vec3 xj0 = b_last_xj.xyz;
        
        if(distance(xi0, xj0) > H || distance(xi, xj) > 2*H) continue;

        if(phase(j) == MATERIAL_SOFT){
            vec3 xj_xi = xj - xi;
            vec3 xi_xj_0 = xi0 - xj0;
        
            //float vO_i = mi / (b_rho_i);
            //float vO_j = mj / (b_rho_j);

            float vO_i = mi / (u_rho0);
            float vO_j = mj / (u_rho0);

            vec3 PWi = symMatTimesVec(b_sigma_i, poly6_grad(xi_xj_0));
            vec3 PWj = symMatTimesVec(b_sigma_j, poly6_grad(-xi_xj_0));
            forces += vO_i * vO_j * (PWi - PWj);
        }


    OVERNNS_END

    return forces;
}

float computeDensity(uint i){
	float density = 0;
	vec3 position = b_pi.xyz;

	OVERNNS
		if(j == i) continue;
		float dist = c_Dij;
		if(dist < 1e-6 || dist > H) continue;
		float Wij = poly6(dist);

		if(phase(j) == MATERIAL_SOFT)
			density += mj * Wij;
	OVERNNS_END

	return density;
}

vec3 pbs_computeXPSH(uint i){
	vec3 xsphSum = vec3(0);
	vec3 position = b_pi.xyz;

	OVERNNS
		if(j == i) continue;

		float dist = c_Dij;
		if(dist < 1e-6 || dist > H) continue;
		float Wij = poly6(dist);

		if(phase(j) == MATERIAL_FLUID)
			xsphSum += 0.01*(mj/b_rho_j) * c_Vji * Wij;
		else if(phase(j) == MATERIAL_SOFT || phase(j) >= MATERIAL_BOUNDARY)
			xsphSum += (mj/b_rho_j) * c_Vji * Wij;

	OVERNNS_END

	//float thermal_visco = u_artificialViscosityMultiplier * ((275 + 400)/b_Ti) + 0.002;

	return u_artificialViscosityMultiplier * 0.5 * xsphSum;
}

vec3 pbs_computeContactDelta(uint i) {
	int n = 0;
	vec3 deltaPosition = vec3(0);

	vec3 position = b_pi.xyz;
	OVERNNS
        if(i == j) continue;

        if(phase(j) == MATERIAL_SOFT){

		    float l0 = 2.0*cst_particleRadius;
		
		    if(l0 >= 2.1*cst_particleRadius || c_Dij < 1e-6) continue; //Ignore particle that are too far

		    float l = c_Dij; // Calculate the current length
		
		    float C = l - l0; // Calculate the constraint violation
		    if( C >= 0) continue;
		    //if(abs(C) < 1e-06) continue;
		    // Calculate the gradient of the constraint function
		    vec3 gradC = normalize(c_Rij);

		    // Calculate the effective mass matrix
		    float inverseMass = (1.0/mi*4.0) + (1.0/mj);

		    float compliance = 0.00001; // Compliance of the constraints
		    float complianceSc = compliance/(u_dt*u_dt);
		    //float deltaLambda = (-C - gamma )/ ((1+gamma) * inverseMass + complianceSc);
		    float deltaLambda = -C / ( inverseMass + complianceSc); 

		    // Calculate and apply the position corrections
		    deltaPosition += gradC * deltaLambda * mi;
		    n++;
		    //particles[i].lambda += deltaLambda;
        }else if(phase(j) == MATERIAL_BOUNDARY){
			vec3 xi0 = b_last_xi.xyz;
			vec3 xj0 = b_last_xj.xyz;
		    float l0 = distance(xi0, xj0);
		
		    if(l0 >= H || c_Dij < 1e-6) continue; //Ignore particle that are too far

		    float l = c_Dij; // Calculate the current length
		
		    float C = l - l0; // Calculate the constraint violation
		    //if(abs(C) < 1e-06) continue;
		    // Calculate the gradient of the constraint function
		    vec3 gradC = normalize(c_Rij);

		    // Calculate the effective mass matrix
		    float inverseMass = (1.0/mi*4.0) + (1.0/mj);

		    float compliance = 0.00001; // Compliance of the constraints
		    float complianceSc = compliance/(u_dt*u_dt);
		    //float deltaLambda = (-C - gamma )/ ((1+gamma) * inverseMass + complianceSc);
		    float deltaLambda = -C / ( inverseMass + complianceSc); 

		    // Calculate and apply the position corrections
		    deltaPosition += gradC * deltaLambda * mi;
		    n++;
		    //particles[i].lambda += deltaLambda;
        }


		
	OVERNNS_END

	if(n > 1) return deltaPosition / float(n);
	else return deltaPosition;
}