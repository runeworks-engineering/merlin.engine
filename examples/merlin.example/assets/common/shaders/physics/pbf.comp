//?#version 430

#pragma once
//?#include "../common/uniforms.comp"
//?#include "../common/constants.comp"
//?#include "../common/buffers.comp"
//?#include "../common/colors.comp"
//?#include "../common/nns.comp"
//?#include "sph.kernels.comp" 
//?#include "boundary.comp" 

float pbf_computeLambda(uint i);
vec3 pbf_computePositionDelta(uint i);
vec3 pbf_computeXPSH(uint i);

void pbf_step(uint i, uint kernel) {
	if(kernel == 0){
		b_last_xi = b_xi;
		b_xi = b_pi;
		vec3 a = vec3(0, 0, -u_g);

		//semi-implicit Euler integration (or Sympletic scheme)
		b_vi.xyz += a * u_dt;
		b_pi.xyz += b_vi.xyz * u_dt;

		return;
	}

	//	-----------------------
	//	Compute neighbor search
	//	-----------------------

	if(kernel == 1){ //compute lagrange multiplier
		b_lambda_i = pbf_computeLambda(i);
		return;
	}
		
	if(kernel == 2){//correct density error and update position
		b_dpi.xyz = pbf_computePositionDelta(i);
		b_dpi.xyz += boundary_solveFloorCollision(i);
		//particles[i].pposition = clampToDomain(particles[i].pposition);
		return;
	}

	if(kernel == 3){//apply XSPH velocity correction
		vec3 corr = b_dpi.xyz;
		if(isnan(corr.x) || isnan(corr.y) || isnan(corr.z)) corr = vec3(0);

		b_pi.xyz += corr;

		b_vi.xyz = (b_pi.xyz - b_xi.xyz)/u_dt; // First order velocity update
		//b_vi.xyz = (1.0/u_dt) * (1.5*b_pi.xyz - 2.0* b_xi.xyz + 0.5*b_last_xi.xyz); // Second order velocity update

		
		//sigma_i = mat4(visco_computeViscoStress(i));
		return;
	}

	if(kernel == 4){//apply XSPH velocity correction
		b_dpi.xyz = pbf_computeXPSH(i);
		return;
	}

	if(kernel == 5){//apply XSPH velocity correction
		b_vi.xyz += b_dpi.xyz;
		return;
	}
}

vec3 pbf_computeXPSH(uint i){
	vec3 xsphSum = vec3(0);
	vec3 position = b_pi.xyz;

	OVERNNS
		if(j == i) continue;
		float dist = c_Dij;
		if(dist < 1e-6 || dist > H) continue;
		float Wij = poly6(dist);

		if(phase(j) == FLUID)
			xsphSum += (mj/b_rho_j) * c_Vji * Wij;
		else if(phase(j) >= BOUNDARY || phase(j) == SOLID || phase(j) == GRANULAR)
			xsphSum += (1.0/b_rho_j) * c_Vji * Wij*3.0;

	OVERNNS_END

	float thermal_visco = u_artificialViscosityMultiplier * ((275 + 400)/b_Ti) + 0.002;

	return thermal_visco * xsphSum;
}

float pbf_computeLambda(uint i) {
    float rho0 = u_rho0;
    float sumGradCj = 0;
    vec3 gradCi = vec3(0);
    float density = 0.0;
    vec3 position = b_pi.xyz;

    OVERNNS
		vec3 diff = c_Rij;
		float dist = length(diff);
		if(dist >= H || dist < 1e-6) continue;

		vec3 gradCj = -spiky_grad(diff);

		if(phase(j) == FLUID){
			gradCi += mj * gradCj;
		}else if (phase(j) == SOLID|| phase(j) == GRANULAR || phase(j) >= BOUNDARY){
			if(b_rho_j > 1e-6)
				gradCi += (1.0/b_rho_j) * gradCj;
		}

		
		if(i != j){
			if(phase(j) == FLUID){
				sumGradCj += dot(gradCj, gradCj);
				density += mj * poly6(dist);
			}else if (phase(j) == SOLID|| phase(j) == GRANULAR || phase(j) >= BOUNDARY){
				density += (rho0/b_rho_j) * 2.0 * poly6(dist);
				vec3 gradCk = (1.0/b_rho_j) * 2.0 *  gradCj;
				sumGradCj += dot(gradCk, gradCk);
			}
		}
	OVERNNS_END

	sumGradCj += dot(gradCi, gradCi);
	sumGradCj = max(sumGradCj, 1e-6);

	#ifdef USE_ONLY_POSITIVE_PRESSURE
		Rhoi = max(density, rho0);
		float C = max((density / rho0) - 1.0, 0.0);
	#else
		b_rho_i = density;
		float C = (density / rho0) - 1.0;
	#endif


    return - ((1.0/mi) * C) / (sumGradCj/pow(rho0, 2));
}


//Compute position deltas w neigbor
vec3 pbf_computePositionDelta(uint i) {
	vec3 posDelta = vec3(0.0f);
	float rho0 = u_rho0;
	float sCorr = 0.0;
	

	#ifdef USE_ONLY_POSITIVE_PRESSURE
		if(Rhoi -  restDensity < 0) return posDelta;
	#endif

	vec3 position = b_pi.xyz;
	OVERNNS
		if(j == i) continue;
		float dist = c_Dij;
		if(dist > H || dist <= 1e-6) continue;
		sCorr = -u_artificialPressureMultiplier * H2 * pow(poly6(dist) / poly6(normalize(vec3(1)) * 0.2*H), 4);
		if(phase(j) == FLUID){
			posDelta += (spikyGradient(c_Rij) * (b_lambda_i + b_lambda_j + sCorr)) / rho0;
		}else if(phase(j) == SOLID|| phase(j) == GRANULAR || phase(j) >= BOUNDARY){
			posDelta += spikyGradient(c_Rij) * (1.0/b_rho_j) * (2.0 * b_lambda_i + sCorr)*1.0;
		}

	OVERNNS_END

	//posDelta = clamp(posDelta, -MAX_DELTA_PI, MAX_DELTA_PI);
	return posDelta;
}